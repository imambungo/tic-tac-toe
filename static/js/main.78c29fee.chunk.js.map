{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","highlight","backgroundColor","value","Board","i","this","squares","winPattern","indexOf","squareIndex","squaresRow","j","push","renderSquare","React","Component","Toggle","onToggle","Game","calculateWinner","a","b","c","handleClick","history","state","slice","stepNumber","length","xIsNext","setState","concat","tile","console","log","ascending","toggleValue","isTie","some","Array","fill","step","status","current","winner","tie","moves","map","move","col","row","Math","floor","desc","key","jumpTo","reverse","reversed","ReactDOM","render","document","getElementById"],"mappings":"iPAMA,SAASA,EAAOC,GASf,OAPC,4BAAQC,UAAU,SACVC,QAASF,EAAME,QACfC,MAAOH,EAAMI,UAAY,CAACC,gBAAiB,QAAU,IAE3DL,EAAMM,O,IAMJC,E,2KACQC,GAAI,IAAD,EACwBC,KAAKT,MAArCU,EADQ,EACRA,QAASR,EADD,EACCA,QAASS,EADV,EACUA,WACzB,OACC,kBAACZ,EAAD,CACCO,MAAOI,EAAQF,GACfN,QAAS,kBAAMA,EAAQM,IACvBJ,UACCO,IAAyC,IAA3BA,EAAWC,QAAQJ,O,+BASpC,IAFA,IAAIK,EAAc,EACdH,EAAU,GACLF,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAE3B,IADA,IAAIM,EAAa,GACRC,EAAI,EAAGA,EAAI,IAAKA,EACxBD,EAAWE,KAAKP,KAAKQ,aAAaJ,MAEnCH,EAAQM,KACP,yBAAKf,UAAU,aACba,IAIJ,OACC,oCACEJ,O,GA9BeQ,IAAMC,WAoC1B,SAASC,EAAT,GAAoC,IAAnBd,EAAkB,EAAlBA,MAAOe,EAAW,EAAXA,SACvB,OAAO,4BAAQnB,QAASmB,GAAWf,G,IAG9BgB,E,kDACL,WAAYtB,GAAQ,IAAD,8BAClB,cAAMA,IAiBPuB,gBAAkB,SAACb,GAWlB,IAVA,IAUA,MAVc,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAER,eAA8B,CAAzB,IAAIC,EAAU,KAAW,cACXA,EADW,GACtBa,EADsB,KACnBC,EADmB,KAChBC,EADgB,KAI7B,GAAIhB,EAAQc,IAAMd,EAAQc,KAAOd,EAAQe,IACvBf,EAAQc,KAAOd,EAAQgB,GAExC,MAAO,CAAChB,EAAQc,GAAIb,GAGtB,MAAO,CAAC,OAvCU,EA4CnBgB,YAAc,SAACnB,GACd,IAAMoB,EAAU,EAAKC,MAAMD,QAAQE,MAAM,EAAG,EAAKD,MAAME,WAAa,GAI9DrB,EAHUkB,EAAQA,EAAQI,OAAS,GAGjBtB,QAAQoB,QAG5B,EAAKP,gBAAgBb,GAAS,IAAMA,EAAQF,KAGhDE,EAAQF,GAAK,EAAKqB,MAAMI,QAAU,IAAM,IACxC,EAAKC,UAAS,SAAAL,GAAK,MAAK,CACvBD,QAASA,EAAQO,OAAO,CACvB,CAECzB,QAASA,EACT0B,KAAM5B,KAKRuB,WAAYF,EAAME,WAAa,EAC/BE,SAAUJ,EAAMI,cAnEC,EAgFnBZ,SAAW,WACVgB,QAAQC,IAAI,QACZ,EAAKJ,UAAS,gBAAEK,EAAF,EAAEA,UAAF,MAAkB,CAC/BA,WAAYA,EACZC,YAAaD,EAAY,YAAc,kBApFtB,EAwFnBE,MAAQ,SAAC/B,GACR,OAAIA,EAAQgC,MAAK,SAAAN,GAAI,OAAa,OAATA,MAvFzB,EAAKP,MAAQ,CACZD,QAAS,CAAC,CACTlB,QAASiC,MAAM,GAAGC,KAAK,QAExBb,WAAY,EACZE,SAAS,EACTM,WAAW,EACXC,YAAa,aACb7B,WAAY,MAVK,E,mDAwEZkC,GACNpC,KAAKyB,SAAS,CAEbH,WAAYc,EACZZ,QAAUY,EAAO,IAAO,M,+BAqBhB,IA8BLC,EA9BI,OAGFlB,EAAUnB,KAAKoB,MAAMD,QACrBmB,EAAUnB,EAAQnB,KAAKoB,MAAME,YAJ3B,EAKqBtB,KAAKc,gBAAgBwB,EAAQrC,SALlD,mBAKDsC,EALC,KAKOrC,EALP,KAMFsC,EAAMxC,KAAKgC,MAAMM,EAAQrC,SAG3BwC,EAAQtB,EAAQuB,KAAI,WAASC,GAAU,IAAjBhB,EAAgB,EAAhBA,KACnBiB,EAAOjB,EAAO,EAAK,EACnBkB,EAAMC,KAAKC,MAAMpB,EAAO,GAAK,EAC/BqB,EAAOL,EAAI,sBAAkBA,EAAlB,aAA2BC,EAA3B,YAAkCC,EAAlC,KACG,mBAKlB,OAJIF,IAAS,EAAKvB,MAAME,aACvB0B,EAAO,2BAAIA,IAIX,wBAAIC,IAAKN,GACR,4BAAQlD,QAAS,kBAAM,EAAKyD,OAAOP,KACjCK,OAkBL,OAbKhD,KAAKoB,MAAMU,WACfW,EAAMU,UAKNd,EADGE,EACM,WAAaA,EACZC,EACD,OAEA,iBAAmBxC,KAAKoB,MAAMI,QAAU,IAAM,KAIvD,yBAAKhC,UAAU,QAGd,yBAAKA,UAAU,cACd,kBAACM,EAAD,CACCG,QAASqC,EAAQrC,QACjBR,QAASO,KAAKkB,YACdhB,WAAYA,KAGd,yBAAKV,UAAU,aACd,6BAAM6C,GACN,kBAAC1B,EAAD,CACCd,MAAOG,KAAKoB,MAAMW,YAClBnB,SAAUZ,KAAKY,WAGdZ,KAAKoB,MAAMU,UACY,4BAAKW,GADL,wBAAIW,UAAQ,GAAEX,S,GA3JzBhC,IAAMC,WAuKzB2C,IAASC,OACR,kBAACzC,EAAD,MACA0C,SAASC,eAAe,W","file":"static/js/main.78c29fee.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// it's called function component\n// Flutter stateless widget equivalent (kinda)\nfunction Square(props) {\n\tconst button = (\n\t\t<button className=\"square\"\n\t\t        onClick={props.onClick}\n\t\t        style={props.highlight ? {backgroundColor: '#888'} : {}}\n\t\t>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n\treturn button;\n}\n\nclass Board extends React.Component {\n\trenderSquare(i) {\n\t\tconst {squares, onClick, winPattern} = this.props;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tvalue={squares[i]}\n\t\t\t\tonClick={() => onClick(i)}\n\t\t\t\thighlight={\n\t\t\t\t\twinPattern && winPattern.indexOf(i) !== -1\n\t\t\t\t}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tlet squareIndex = 0;\n\t\tlet squares = [];\n\t\tfor (let i = 0; i < 3; ++i) {\n\t\t\tlet squaresRow = [];\n\t\t\tfor (let j = 0; j < 3; ++j) {\n\t\t\t\tsquaresRow.push(this.renderSquare(squareIndex++));\n\t\t\t}\n\t\t\tsquares.push(\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{squaresRow}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{squares}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nfunction Toggle({value, onToggle}) {\n\treturn <button onClick={onToggle}>{value}</button>\n}\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thistory: [{\n\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t}],\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true,\n\t\t\tascending: true,\n\t\t\ttoggleValue: 'descending',\n\t\t\twinPattern: null,\n\t\t};\n\t}\n\n\t/*\n\t * squares = array dg panjang 9 (9 kotak)\n\t * return pemenang ('X' atau 'O' atau null)\n\t */\n\tcalculateWinner = (squares) => {\n\t\tconst lines = [  // kombinasi menang\n\t\t\t[0, 1, 2],\n\t\t\t[3, 4, 5],\n\t\t\t[6, 7, 8],\n\t\t\t[0, 3, 6],\n\t\t\t[1, 4, 7],\n\t\t\t[2, 5, 8],\n\t\t\t[0, 4, 8],\n\t\t\t[2, 4, 6],\n\t\t];\n\t\tfor (let winPattern of lines) {\n\t\t\tconst [a, b, c] = winPattern;\n\n\t\t\t// jika tidak null dan semuanya sama\n\t\t\tif (squares[a] && squares[a] === squares[b]\n\t\t\t               && squares[a] === squares[c])\n\t\t\t{\n\t\t\t\treturn [squares[a], winPattern];\n\t\t\t}\n\t\t}\n\t\treturn [null];\n\t}\n\n\t// i = number (0-8)\n\t// klik kotak, bukan jump to step\n\thandleClick = (i) => {\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\n\t\tconst current = history[history.length - 1];\n\n\t\t                                // supaya tdk nge-mutate current.squares\n\t\tconst squares = current.squares.slice();\n\n\t\t// jika sudah ada pemenangnya atau square-nya sudah di-klik\n\t\tif (this.calculateWinner(squares)[0] || squares[i]) {\n\t\t\treturn;\n\t\t}\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState(state => ({\n\t\t\thistory: history.concat([\n\t\t\t\t{\n\t\t\t\t\t         // squares current, dimana index ke-i sudah berisi\n\t\t\t\t\tsquares: squares,\n\t\t\t\t\ttile: i\n\t\t\t\t}\n\t\t\t]),\n\t\t\t//            // ini history fungsi ini, bukan this.state\n\t\t\t//stepNumber: history.length,\n\t\t\tstepNumber: state.stepNumber + 1,\n\t\t\txIsNext: !state.xIsNext,\n\t\t}));\n\t}\n\n\t// step = number\n\tjumpTo(step) {\n\t\tthis.setState({\n\t\t\t// state updates are merged, no need to include history\n\t\t\tstepNumber: step,\n\t\t\txIsNext: (step % 2) === 0,\n\t\t});\n\t}\n\n\tonToggle = () => {\n\t\tconsole.log('cubo')\n\t\tthis.setState(({ascending}) => ({\n\t\t\tascending: !ascending,\n\t\t\ttoggleValue: ascending ? 'ascending' : 'descending',\n\t\t}));\n\t}\n\n\tisTie = (squares) => {\n\t\tif (squares.some(tile => tile === null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// because isTie check comes after calculateWinner check\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t// ingat, di dalam render kita cuma nge-render!\n\t\t// jangan nge-modify/mutate this.state\n\t\tconst history = this.state.history;\n\t\tconst current = history[this.state.stepNumber];\n\t\tconst [winner, winPattern] = this.calculateWinner(current.squares);\n\t\tconst tie = this.isTie(current.squares);\n\n\t\t                                 // index\n\t\tlet moves = history.map(({tile}, move) => {\n\t\t\tconst col = (tile % 3) + 1;\n\t\t\tconst row = Math.floor(tile / 3) + 1\n\t\t\tlet desc = move ? `Go to move #${move} (${col},${row})`\n\t\t\t                : 'Go to game start';\n\t\t\tif (move === this.state.stepNumber) {\n\t\t\t\tdesc = <b>{desc}</b>;\n\t\t\t}\n\t\t\t// key di bawah nggak ngefek?\n\t\t\treturn (\n\t\t\t\t<li key={move}>\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}>\n\t\t\t\t\t\t{desc}\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t\tif (!this.state.ascending) {\n\t\t\tmoves.reverse();\n\t\t}\n\n\t\tlet status;\n\t\tif (winner) {\n\t\t\tstatus = 'Winner: ' + winner;\n\t\t} else if (tie) {\n\t\t\tstatus = 'Draw';\n\t\t} else {\n\t\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t{/*sebenarnya nggak perlu className game-board\n\t\t\t\t\teven more, tidak perlu div at all, langsung Board aja*/}\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tsquares={current.squares}\n\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\twinPattern={winPattern}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{status}</div>\n\t\t\t\t\t<Toggle\n\t\t\t\t\t\tvalue={this.state.toggleValue}\n\t\t\t\t\t\tonToggle={this.onToggle}\n\t\t\t\t\t/>\n\t\t\t\t\t{\n\t\t\t\t\t\t!this.state.ascending ? <ol reversed>{moves}</ol>\n\t\t\t\t\t\t                      : <ol>{moves}</ol>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// ========================================\n\n// coba cek aplikasi react yg lain gini jg nggak\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}